{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#1)Install necessary pacakges\n",
    "!pip install scanpy anndata matplotlib seaborn rpy2\n",
    "\n",
    "\n",
    "\n",
    "#2) Import Libraries\n",
    "\n",
    "import scanpy as sc\n",
    "import anndata as ad\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import rpy2.robjects as ro\n",
    "from rpy2.robjects import pandas2ri\n",
    "from rpy2.robjects.packages import importr\n",
    "\n",
    "# Activate the pandas2ri conversion\n",
    "pandas2ri.activate()\n",
    "\n",
    "# Import Seurat if using it\n",
    "seurat = importr('Seurat')\n",
    "\n",
    "#3)Quality Control and Preprocessing\n",
    "# Load the data (assuming 10X Genomics format)\n",
    "adata = sc.read_10x_mtx('path_to_filtered_feature_bc_matrix')\n",
    "\n",
    "# Perform basic QC filtering\n",
    "sc.pp.filter_cells(adata, min_genes=200)\n",
    "sc.pp.filter_genes(adata, min_cells=3)\n",
    "\n",
    "# Calculate QC metrics\n",
    "adata.var['mt'] = adata.var_names.str.startswith('MT-')\n",
    "sc.pp.calculate_qc_metrics(adata, qc_vars=['mt'], percent_top=None, log1p=False, inplace=True)\n",
    "\n",
    "# Filter cells based on QC metrics\n",
    "adata = adata[adata.obs.n_genes_by_counts < 2500, :]\n",
    "adata = adata[adata.obs.total_counts < 10000, :]\n",
    "adata = adata[adata.obs.pct_counts_mt < 5, :]\n",
    "\n",
    "#4)Normalization and Scaling\n",
    "# Normalize the data\n",
    "sc.pp.normalize_total(adata, target_sum=1e4)\n",
    "sc.pp.log1p(adata)\n",
    "\n",
    "# Find highly variable genes\n",
    "sc.pp.highly_variable_genes(adata, min_mean=0.0125, max_mean=3, min_disp=0.5)\n",
    "adata = adata[:, adata.var.highly_variable]\n",
    "\n",
    "# Scale the data\n",
    "sc.pp.scale(adata, max_value=10)\n",
    "\n",
    "\n",
    "#5. Clustering and Dimensionality Reduction\n",
    "\n",
    "# PCA\n",
    "sc.tl.pca(adata, svd_solver='arpack')\n",
    "sc.pl.pca_variance_ratio(adata, log=True)\n",
    "\n",
    "# Compute the neighborhood graph\n",
    "sc.pp.neighbors(adata, n_neighbors=10, n_pcs=40)\n",
    "\n",
    "# UMAP\n",
    "sc.tl.umap(adata)\n",
    "sc.pl.umap(adata, color=['CST3', 'NKG7', 'PPBP'])\n",
    "\n",
    "# Clustering\n",
    "sc.tl.leiden(adata)\n",
    "sc.pl.umap(adata, color=['leiden'])\n",
    "\n",
    "#6)Identify differentially expressed genes.\n",
    "# Rank genes by groups\n",
    "sc.tl.rank_genes_groups(adata, 'leiden', method='t-test')\n",
    "sc.pl.rank_genes_groups(adata, n_genes=20, sharey=False)\n",
    "\n",
    "\n",
    "#7)Save Results and Generate Reports\n",
    "\n",
    "# Save processed data\n",
    "adata.write('processed_data.h5ad')\n",
    "\n",
    "# Generate QC report\n",
    "qc_report = adata.obs[['n_genes_by_counts', 'total_counts', 'pct_counts_mt']]\n",
    "qc_report.to_csv('qc_report.csv')\n",
    "\n",
    "# Save clustering results\n",
    "clustering_results = adata.obs['leiden']\n",
    "clustering_results.to_csv('clustering_results.csv')\n",
    "\n",
    "# Save differential expression results\n",
    "de_results = sc.get.rank_genes_groups_df(adata, group=None)\n",
    "de_results.to_csv('de_results.csv')\n",
    "\n",
    "# Save UMAP plot\n",
    "sc.pl.umap(adata, color=['leiden'], save='umap_plot.png')\n",
    "\n",
    "\n",
    "#Incase of fastq files we need to generate a count matrix before proceeding with the analysis"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
